const express = require("express");
const flash = require('express-flash');
const mongoose = require('mongoose');
const session = require('express-session');

const app = express();

// app.use(express.static(__dirname + "/static"));
app.use(express.static( __dirname + '/public/dist/public' ));

app.use(express.urlencoded({extended: true}));

app.use(express.json());

app.use(flash());

app.use(session({
    secret: 'keyboardkitteh',
    resave: false,
    saveUninitialized: true,
    cookie: { maxAge: 60000 }
}))

mongoose.connect('mongodb://localhost/rateMyCakesDb', {useNewUrlParser: true});

const RatingSchema = new mongoose.Schema({
    // _id: (string) (default id generated by mongoDB)
    
    numberOfStars: { type: Number, required: true, default: 3},

    comment: {type: String, default: 'No comment.'},

    created_at: { type: Date, default: Date.now()},

    updated_at: { type: Date, default: Date.now()},
})

// creating the schema(s)
const CakeSchema = new mongoose.Schema({
    // _id: (string) (default id generated by mongoDB)

    bakerName: { type: String, required: true, minlength: 3},

    imageURL: { type: String, default: 'whereIsTheURL'},

    ratings: [RatingSchema],

    created_at: { type: Date, default: Date.now()},

    updated_at: { type: Date, default: Date.now()},
})

// create an object(s) that contains methods for mongoose to interface with MongoDB
const Rating = mongoose.model('Rating', RatingSchema);
const Cake = mongoose.model('Cake', CakeSchema);

app.set('view engine', 'ejs');
app.set('views', __dirname + '/views');

// used JSONView extension (Chrome) to make the JSON render prettily

// index
// GET: Retrieve all cakes
// app.get('/allCakes', (req, res) => {
app.get('/allCakes', (req, res) => {
    Cake.find()
        .then(cakes => res.json(cakes))
        .catch(err => res.json(err));
});

// POST: Create a cake
app.post('/cakes', (req, res) => {
    // create the cake
    // console.log(req)
    const cake = new Cake();
    cake.bakerName = req.body.bakerName;
    cake.imageURL = req.body.imageURL;
    cake.save()
        .then(newCake => res.json(newCake))
        .catch(err => {
            console.log("We have an error!", err);
            // adjust the code below as needed to create a flash message with the tag and content you would like
            for (var key in err.errors) {
                req.flash('registration', err.errors[key].message);
            }
            res.redirect('/');
        })
});

// PUT: Update a cake by ID to add a rating
app.put('/cakes/:id', (req, res) => {
    console.log(req.body);
    Cake.findOne({_id: req.params.id})
        .then(cake => {
            const rating = new Rating();
            rating.numberOfStars = req.body.numberOfStars;
            rating.comment = req.body.comment;
            rating.save()
                .then(newRating => {
                // console.log('REACHED THIS POINT');
                cake.ratings.push(newRating)
                cake.save()
                    .then(editedCake => {
                        res.json(editedCake)
                    })
                    .catch(err => {
                        console.log("We have an error!", err);
                        // adjust the code below as needed to create a flash message with the tag and content you would like
                        for (var key in err.errors) {
                            req.flash('registration', err.errors[key].message);
                        }
                        res.redirect('/');
                    })
            })
            .catch(err => {
            console.log("We have an error!", err);
            // adjust the code below as needed to create a flash message with the tag and content you would like
            for (var key in err.errors) {
                req.flash('registration', err.errors[key].message);
            }
            res.redirect('/');
            })
        })
        .catch(err => res.json(err));
});

app.listen(8000, () => console.log("listening on port 8000"));